const mongoose = require('mongoose');
const Supplier = require('../models/Supplier');
const Product = require('../models/Product');

// K·∫øt n·ªëi MongoDB
mongoose.connect('mongodb://localhost:27017/supplier_management', {
    useNewUrlParser: true,
    useUnifiedTopology: true
}).then(() => {
    console.log('K·∫øt n·ªëi MongoDB th√†nh c√¥ng');
}).catch(err => {
    console.error('L·ªói k·∫øt n·ªëi MongoDB:', err);
});

// Function ƒë·ªÉ th√™m nh√† cung c·∫•p
async function addSupplier(supplierData) {
    try {
        const supplier = new Supplier(supplierData);
        await supplier.save();
        console.log(`‚úÖ ƒê√£ th√™m nh√† cung c·∫•p: ${supplier.name}`);
        return supplier;
    } catch (error) {
        console.error(`‚ùå L·ªói khi th√™m nh√† cung c·∫•p:`, error.message);
        return null;
    }
}

// Function ƒë·ªÉ th√™m s·∫£n ph·∫©m
async function addProduct(productData) {
    try {
        const product = new Product(productData);
        await product.save();
        console.log(`‚úÖ ƒê√£ th√™m s·∫£n ph·∫©m: ${product.name}`);
        return product;
    } catch (error) {
        console.error(`‚ùå L·ªói khi th√™m s·∫£n ph·∫©m:`, error.message);
        return null;
    }
}

// Function ƒë·ªÉ l·∫•y danh s√°ch nh√† cung c·∫•p
async function getSuppliers() {
    try {
        const suppliers = await Supplier.find().select('_id name supplierID');
        return suppliers;
    } catch (error) {
        console.error('‚ùå L·ªói khi l·∫•y danh s√°ch nh√† cung c·∫•p:', error.message);
        return [];
    }
}

// Function ƒë·ªÉ hi·ªÉn th·ªã th·ªëng k√™
async function showStats() {
    try {
        const supplierCount = await Supplier.countDocuments();
        const productCount = await Product.countDocuments();
        
        console.log('\nüìä TH·ªêNG K√ä D·ªÆ LI·ªÜU:');
        console.log(`üè¢ T·ªïng s·ªë nh√† cung c·∫•p: ${supplierCount}`);
        console.log(`üì¶ T·ªïng s·ªë s·∫£n ph·∫©m: ${productCount}`);
        
        // Th·ªëng k√™ s·∫£n ph·∫©m theo danh m·ª•c
        const categoryStats = await Product.aggregate([
            { $group: { _id: '$category', count: { $sum: 1 } } },
            { $sort: { count: -1 } }
        ]);
        
        console.log('\nüìà TH·ªêNG K√ä THEO DANH M·ª§C:');
        categoryStats.forEach(stat => {
            console.log(`   ${stat._id}: ${stat.count} s·∫£n ph·∫©m`);
        });
        
    } catch (error) {
        console.error('‚ùå L·ªói khi l·∫•y th·ªëng k√™:', error.message);
    }
}

// Function ƒë·ªÉ x√≥a t·∫•t c·∫£ d·ªØ li·ªáu
async function clearAllData() {
    try {
        await Supplier.deleteMany({});
        await Product.deleteMany({});
        console.log('üóëÔ∏è ƒê√£ x√≥a to√†n b·ªô d·ªØ li·ªáu');
    } catch (error) {
        console.error('‚ùå L·ªói khi x√≥a d·ªØ li·ªáu:', error.message);
    }
}

// Menu t∆∞∆°ng t√°c
async function showMenu() {
    const readline = require('readline');
    const rl = readline.createInterface({
        input: process.stdin,
        output: process.stdout
    });

    function question(prompt) {
        return new Promise((resolve) => {
            rl.question(prompt, resolve);
        });
    }

    console.log('\nüéØ QU·∫¢N L√ù D·ªÆ LI·ªÜU - MENU T∆Ø∆†NG T√ÅC');
    console.log('=====================================');
    console.log('1. Th√™m nh√† cung c·∫•p m·ªõi');
    console.log('2. Th√™m s·∫£n ph·∫©m m·ªõi');
    console.log('3. Xem th·ªëng k√™');
    console.log('4. X√≥a to√†n b·ªô d·ªØ li·ªáu');
    console.log('5. Tho√°t');
    console.log('=====================================');

    const choice = await question('Ch·ªçn ch·ª©c nƒÉng (1-5): ');

    switch (choice) {
        case '1':
            console.log('\nüìù TH√äM NH√Ä CUNG C·∫§P M·ªöI:');
            const supplierID = await question('M√£ nh√† cung c·∫•p: ');
            const name = await question('T√™n nh√† cung c·∫•p: ');
            const address = await question('ƒê·ªãa ch·ªâ: ');
            const phone = await question('S·ªë ƒëi·ªán tho·∫°i: ');
            
            await addSupplier({ supplierID, name, address, phone });
            break;

        case '2':
            console.log('\nüì¶ TH√äM S·∫¢N PH·∫®M M·ªöI:');
            const suppliers = await getSuppliers();
            
            if (suppliers.length === 0) {
                console.log('‚ùå Ch∆∞a c√≥ nh√† cung c·∫•p n√†o. Vui l√≤ng th√™m nh√† cung c·∫•p tr∆∞·ªõc.');
                break;
            }

            console.log('\nDanh s√°ch nh√† cung c·∫•p:');
            suppliers.forEach((sup, index) => {
                console.log(`${index + 1}. ${sup.name} (${sup.supplierID})`);
            });

            const productName = await question('T√™n s·∫£n ph·∫©m: ');
            const description = await question('M√¥ t·∫£: ');
            const price = await question('Gi√°: ');
            const category = await question('Danh m·ª•c: ');
            const supplierIndex = await question(`Ch·ªçn nh√† cung c·∫•p (1-${suppliers.length}): `);
            
            const selectedSupplier = suppliers[parseInt(supplierIndex) - 1];
            if (selectedSupplier) {
                await addProduct({
                    name: productName,
                    description,
                    price: parseInt(price),
                    category,
                    supplier: selectedSupplier._id
                });
            } else {
                console.log('‚ùå Nh√† cung c·∫•p kh√¥ng h·ª£p l·ªá');
            }
            break;

        case '3':
            await showStats();
            break;

        case '4':
            const confirm = await question('‚ö†Ô∏è B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a to√†n b·ªô d·ªØ li·ªáu? (y/N): ');
            if (confirm.toLowerCase() === 'y') {
                await clearAllData();
            } else {
                console.log('‚ùå ƒê√£ h·ªßy thao t√°c x√≥a');
            }
            break;

        case '5':
            console.log('üëã T·∫°m bi·ªát!');
            rl.close();
            process.exit(0);
            break;

        default:
            console.log('‚ùå L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá');
            break;
    }

    rl.close();
    
    // Ti·∫øp t·ª•c hi·ªÉn th·ªã menu
    setTimeout(showMenu, 1000);
}

// Kh·ªüi ch·∫°y menu n·∫øu file ƒë∆∞·ª£c ch·∫°y tr·ª±c ti·∫øp
if (require.main === module) {
    console.log('üöÄ Kh·ªüi ƒë·ªông c√¥ng c·ª• qu·∫£n l√Ω d·ªØ li·ªáu...');
    setTimeout(showMenu, 1000);
}

// Export functions ƒë·ªÉ s·ª≠ d·ª•ng ·ªü n∆°i kh√°c
module.exports = {
    addSupplier,
    addProduct,
    getSuppliers,
    showStats,
    clearAllData
};